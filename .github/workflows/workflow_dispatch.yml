name: Debug MDJ Diagram Generation

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  debug-diagrams:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y jq graphviz default-jre

      - name: Install PlantUML
        run: |
          mkdir -p ./tools
          cd ./tools
          wget -q https://github.com/plantuml/plantuml/releases/download/v1.2023.10/plantuml-1.2023.10.jar -O plantuml.jar
          echo "PlantUML downloaded successfully"

      - name: Debug MDJ Files
        run: |
          # Find all MDJ files
          mdj_files=$(find . -name "*.mdj")
          echo "Found these MDJ files:"
          echo "$mdj_files"
          
          # Process each file
          for mdj_file in $mdj_files; do
            echo "==== Debugging $mdj_file ===="
            
            # Check if file exists and can be read
            if [ ! -r "$mdj_file" ]; then
              echo "ERROR: Cannot read $mdj_file"
              continue
            fi
            
            # Check file size
            size=$(du -h "$mdj_file" | cut -f1)
            echo "File size: $size"
            
            # Check if valid JSON
            if ! jq empty "$mdj_file" 2>/dev/null; then
              echo "ERROR: $mdj_file is not valid JSON"
              continue
            fi
            
            # Get top-level structure
            echo "Top-level keys:"
            jq -r 'keys[]' "$mdj_file"
            
            # Check for diagrams specifically
            echo "Looking for diagrams..."
            diagrams=$(jq -r '.ownedElements[] | select(._type == "UMLClassDiagram" or ._type == "UMLSequenceDiagram" or ._type == "UMLUseCaseDiagram") | .name' "$mdj_file" 2>/dev/null)
            
            if [ -n "$diagrams" ]; then
              echo "Found diagrams:"
              echo "$diagrams"
            else
              echo "No diagrams found with simple query. Trying deeper search..."
              diagrams_deep=$(jq -r '.. | objects | select(._type != null and (._type | contains("Diagram"))) | .name' "$mdj_file" 2>/dev/null)
              
              if [ -n "$diagrams_deep" ]; then
                echo "Found diagrams with deep search:"
                echo "$diagrams_deep"
              else
                echo "No diagrams found even with deep search."
              fi
            fi
            
            # Create output directory
            output_dir="debug_diagrams/$(dirname "${mdj_file#./}")"
            mkdir -p "$output_dir"
            
            # Extract diagram data for debugging
            echo "Extracting diagram data..."
            jq -r '.. | objects | select(._type != null and (._type | contains("Diagram"))) | 
              "@startuml\ntitle " + (.name // "Unnamed") + "\n" +
              (if .ownedElements then
                (.ownedElements[] | 
                  if ._type == "UMLClass" then 
                    "class \"" + (.name // "Unnamed") + "\" {\n" +
                    (if .operations then
                      (.operations[] | "  +" + (.name // "method") + "()\n") 
                    else "" end) +
                    (if .attributes then
                      (.attributes[] | "  +" + (.name // "attr") + "\n")
                    else "" end) +
                    "}\n"
                  else "" end
                )
              else "" end) +
              "@enduml"' "$mdj_file" > "$output_dir/$(basename "$mdj_file" .mdj).puml"
            
            # Show the generated PlantUML content
            echo "Generated PlantUML content:"
            cat "$output_dir/$(basename "$mdj_file" .mdj).puml"
            
            # Generate diagram
            echo "Generating diagram..."
            java -jar ./tools/plantuml.jar -tpng "$output_dir/$(basename "$mdj_file" .mdj).puml" -o "$output_dir"
            
            # Check if diagram was created
            png_file="$output_dir/$(basename "$mdj_file" .mdj).png"
            if [ -f "$png_file" ]; then
              echo "SUCCESS: Diagram generated at $png_file"
              # Get file size of generated PNG
              png_size=$(du -h "$png_file" | cut -f1)
              echo "PNG size: $png_size"
            else
              echo "ERROR: Failed to generate diagram"
            fi
            
            echo "==== End debugging $mdj_file ===="
            echo ""
          done
          
          # List all generated files
          echo "All files in debug_diagrams directory:"
          find debug_diagrams -type f | sort

      - name: Commit Debug Results
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add debug_diagrams/
          git add tools/
          git commit -m "Add debug information for MDJ files" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF}
